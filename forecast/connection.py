# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_connection.ipynb.

# %% auto 0
__all__ = ['SnowparkConnection']

# %% ../nbs/00_connection.ipynb 3
import os
import logging
import yaml
import warnings

from typing import Optional, Dict
from snowflake.snowpark import Session
from snowflake.snowpark.context import get_active_session
from snowflake.snowpark.exceptions import SnowparkSessionException


logging.getLogger('snowflake.snowpark').setLevel(logging.WARNING)
 

# %% ../nbs/00_connection.ipynb 4
class SnowparkConnection:
    """
    Manages Snowpark connection sessions, configuration, and lifecycle.
    """

    def __init__(self, connection_config: Optional[Dict[str, str]] = None, config_file: str = 'snowflake_config.yaml'):
        self.connection_config = connection_config or self.load_connection_config(config_file)
        self.session = self._get_active_or_new_session()

    def load_connection_config(self, yaml_file: str) -> Dict[str, str]:
        """
        Load the Snowflake connection configuration from a YAML file or environment variables.

        Args:
            yaml_file (str): The path to the YAML file.

        Returns:
            Dict[str, str]: The Snowflake connection configuration.
        """
        if os.path.isfile(yaml_file):
            try:
                with open(yaml_file, 'r') as file:
                    config = yaml.safe_load(file)
                return config.get('snowflake', {})
            except FileNotFoundError:
                logging.warning(f"Configuration file '{yaml_file}' not found. Falling back to environment variables.")
        return {}

    def _get_active_or_new_session(self) -> Session:
        """
        Get the active Snowpark session or create a new one if none exists.

        Returns:
            Session: The Snowpark session.
        """
        try:
            session = get_active_session()
            logging.info("Using active Snowpark session.")
        except SnowparkSessionException:
            session = self.create_session()
        return session

    def create_session(self) -> Session:
        """
        Create a new Snowpark session using the provided configuration.

        Returns:
            Session: The new Snowpark session.
        """
        session_config = self._build_session_config()
        try:
            session = Session.builder.configs(session_config).create()
            logging.info("Snowpark session successfully created.")
            return session
        except SnowparkSessionException as e:
            logging.error(f"Error creating Snowpark session: {e}")
            raise e

    def _build_session_config(self) -> Dict[str, str]:
        """
        Build the session configuration dictionary, prioritizing environment variables if available.

        Returns:
            Dict[str, str]: The session configuration dictionary.
        """
        if os.path.isfile("/snowflake/session/token"):
            session_config = {
                'host': os.getenv('SNOWFLAKE_HOST'),
                'port': os.getenv('SNOWFLAKE_PORT'),
                'protocol': "https",
                'account': os.getenv('SNOWFLAKE_ACCOUNT'),
                'authenticator': "oauth",
                'token': open('/snowflake/session/token', 'r').read(),
                'warehouse': self.connection_config.get("warehouse") or os.getenv('SNOWFLAKE_WAREHOUSE'),
                'database': self.connection_config.get("database") or os.getenv('SNOWFLAKE_DATABASE'),
                'schema': self.connection_config.get("schema") or os.getenv('SNOWFLAKE_SCHEMA'),
                'client_session_keep_alive': True
            }
        else:
            session_config = {
                'account': self.connection_config.get("account") or os.getenv('SNOWFLAKE_ACCOUNT'),
                'user': self.connection_config.get("user") or os.getenv('SNOWFLAKE_USER'),
                'password': self.connection_config.get("password") or os.getenv('SNOWFLAKE_PASSWORD'),
                'role': self.connection_config.get("role") or os.getenv('SNOWFLAKE_ROLE', 'ACCOUNTADMIN'),
                'warehouse': self.connection_config.get("warehouse") or os.getenv('SNOWFLAKE_WAREHOUSE'),
                'database': self.connection_config.get("database") or os.getenv('SNOWFLAKE_DATABASE'),
                'schema': self.connection_config.get("schema") or os.getenv('SNOWFLAKE_SCHEMA'),
                'client_session_keep_alive': True
            }
        for key in ['account', 'user', 'password', 'role', 'warehouse', 'database', 'schema']:
            if key not in session_config or not session_config[key]:
                warnings.warn(f"Missing or empty session configuration for '{key}'.")
        return session_config

    def get_session(self) -> Session:
        """
        Return the Snowpark session.

        Returns:
            Session: The Snowpark session.
        """
        return self.session

    def close_session(self) -> None:
        """
        Close the Snowpark session.
        """
        try:
            self.session.close()
        except SnowparkSessionException as e:
            logging.error(f"Error closing Snowpark session: {e}")

